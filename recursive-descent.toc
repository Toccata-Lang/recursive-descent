
(add-ns grmr (git-dependency "https://github.com/Toccata-Lang/grammar.git"
                             "grammar.toc"
                             :sha "e8eba87"))

(deftype ParserState [curr-input input rule-map values]
  (assert (instance? String curr-input))
  (assert (instance? HashMap values))

  Stringable
  (string-list [_] (list "<ParserState>"))

  Collection
  (empty? [_]
    (and (empty? curr-input)
         (empty? input))))

(defn next-input-buffer [s]
  (assert (instance? ParserState s))
  (let [input (.input s)]
    (for [new-text (first input)]
      (-> s
          (.curr-input new-text)
          (.input (either (empty? new-text)
                          (rest input)))))))

(defn reader [n s]
  (assert (instance? ParserState s))

  (let [text (.curr-input s)
        text-length (count text)]
    (or (and (< n text-length)
             (maybe [(subs text 0 n)
                     (.curr-input s (subs text n))]))
        (and (= n text-length)
             (or (map (next-input-buffer s)
                      (fn [new-s]
                        [text new-s]))
                 (maybe [text (.curr-input s "")])))
        ;; (< text-length n)
        (flat-map (next-input-buffer s)
                  (fn [new-s]
                    (let [next-read (reader (- n text-length) new-s)]
                      (and next-read (let [[texts final-s] (extract next-read)]
                                       (maybe [(comp text texts) final-s])))))))))

(deftype ParserFail []
  Stringable
  (string-list [_]
    (list "(ParserFail)"))

  Container
  (map [x f]
    x)

  (map [x f embed]
    (embed x)))
(def parser-fail (ParserFail))

(deftype ParserMatch [value state]
  Stringable
  (string-list [_]
    (list "(ParserMatch " (str value) "\n" (str state) ")"))

  Container
  (map [x f]
    x)

  (map [x f embed]
    (embed x)))

(deftype ParserIgnore [state]
  Stringable
  (string-list [_]
    (list "(ParserIgnore " (str state) ")"))

  Container
  (map [x f]
    x)

  (map [x f embed]
    (embed x)))

(deftype ParserError [msg state]
  Stringable
  (string-list [_]
    (list "(ParserError " (str msg) "\n" (str state) ")"))

  Container
  (map [x f]
    x)

  (map [x f embed]
    (embed x)))

(defprotocol Parser
  (terminate-string [s]
    s)
  
  (collapse-branches [r]
    [r {}])

  (parse [r state]
    (assert (instance? ParserState state))))

(extend-type String
  Parser
  (terminate-string [s]
    (grmr/parser-terminal s)))

(extend-type grmr/parser-terminal
  Parser
  (parse [r state]
    (let [term-str (.term-str r)
          term-count (count term-str)]
      (either (for [[text new-state] (reader term-count state)
                    :when (= text term-str)]
                (ParserMatch term-str new-state))
              parser-fail))))

(extend-type grmr/parser-not-char
  Parser
  (parse [r state]
    (let [test-c (.test-c r)]
      (either (for [[c new-state] (reader 1 state)
                    :when-not (= c test-c)]
                (ParserMatch c new-state))
              parser-fail))))

(extend-type grmr/parser-char-range
  Parser
  (parse [r state]
    (either (for [[c new-state] (reader 1 state)
                  :when (< (dec (char-code (.lower r)))
                           (char-code c)
                           (inc (char-code (.higher r))))]
              (ParserMatch c new-state))
            parser-fail)))

(extend-type grmr/get-state-value
  Parser
  (parse [r state]
    (either (map (get-in state [.values (.key r)])
                 (fn [val]
                   (ParserMatch val state)))
            (ParserError (str "No value for key '" (.key r) "' found.")
                         state))))

(extend-type grmr/update-state-value
  Parser
  (parse [r state]
    (either (map (get-in state [.values (.key r)])
                 (fn [val]
                   (ParserMatch val (assoc-in state [.values (.key r)] ((.f r) val)))))
            (ParserError (str "No value for key '" (.key r) "' found.")
                         state))))

(extend-type grmr/parser-get-text
  Parser
  (parse [r state]
    (either (map (get state .curr-input)
                 (fn [val]
                   (ParserMatch val state)))
            (ParserError "Invalid state. Missing .curr-input"
                         state))))

(defn fn-reader [f s]
  (assert (instance? Fn f))
  (assert (instance? ParserState s))

  (let [text (.curr-input s)
        length (f text)]
    (or (and (or (= length (count text)))
             (for [new-s (next-input-buffer s)
                   [tail final-s] (fn-reader f new-s)]
               [(cons text tail) final-s]))
        (and (< 0 length)
             (maybe [(list (subs text 0 length))
                     (.curr-input s (subs text length))])))))

(extend-type grmr/parser-term-fn
  Parser
  (parse [p s]
    (either (for [[str-list new-s] (fn-reader (.f p) s)]
              (let [line-count (reduce str-list 0
                                       (fn [line-count s]
                                         (reduce s line-count
                                                 (fn [line-count c]
                                                   (+ line-count (either (and (= c "\n")
                                                                              (maybe 1))
                                                                         0))))))]
                (ParserMatch (to-str str-list)
                             (either (update-in new-s [.values 'line-number]
                                                (fn [lc] (+ lc line-count)))
                                     (assoc-in new-s [.values 'line-number] line-count)))))
            parser-fail)))

(extend-type grmr/error-value
  Parser
  (parse [error state]
    (either (or (for [file (get-in error [.state .values 'file-name])
                      line (get-in error [.state .values 'line-number])
                      expr-line (get-in state [.values 'line-number])]
                  (ParserError (str (cond (= line expr-line) ""
                                          (str "\n In expression at line " (str expr-line ".\n")))
                                    "Error at " file ": " line "; " (.msg error))
                               state))
                (for [file (get-in state [.values 'file-name])
                      line (get-in state [.values 'line-number])]
                  (ParserError (str "Error at " file ": " line "; " (.msg error))
                               state)))
            (ParserError (.msg error) state))))

(extend-type grmr/parser-always
  Parser
  (parse [r state]
    (ParserMatch (.value r) state)))

(extend-type grmr/parser-apply
  Parser
  (collapse-branches [r]
    (let [[pf pf-rule-map] (.pf r)
          [args rule-map] (reduce (.args r) [[] {}]
                                  (fn [[r m] [inner-r inner-m]]
                                    [(conj r inner-r)
                                     (comp m inner-m)]))]
      [(grmr/parser-apply pf args) (comp pf-rule-map rule-map)]))

  (parse [r state]
    (cond (empty? (.args r))
          (ParserError (str "Invalid parser " _FILE_ " " _LINE_) state)

          (let [f-and-args (reduce (comp [(.pf r)] (.args r))
                                   (ParserMatch [] state)
                                   (fn [result inner-r]
                                     (cond (instance? ParserMatch result)
                                           (let [inner-result (parse inner-r (.state result))]
                                             (cond (instance? ParserMatch inner-result)
                                                   (ParserMatch (conj (.value result)
                                                                      (.value inner-result))
                                                                (.state inner-result))

                                                   (instance? ParserIgnore inner-result)
                                                   (ParserMatch (.value result)
                                                                (.state inner-result))

                                                   inner-result))

                                           result)))]
            (cond (instance? ParserMatch f-and-args)
                  (let [[f & args] (.value f-and-args)]
                    (.value f-and-args (apply f args)))

                  f-and-args)))))

(extend-type grmr/none-or-more-rule
  Parser
  (collapse-branches [r]
    (let [[rule rule-map] (.rule r)]
      [(.rule r rule) rule-map]))

  (parse [r s]
    (let [f (fn repeat-parse [vs s]
              (let [v (parse (.rule r) s)]
                (cond (instance? ParserFail v)
                      (ParserMatch vs s)

                      (instance? ParserMatch v)
                      (repeat-parse (conj vs (.value v)) (.state v))

                      (instance? ParserIgnore v)
                      (repeat-parse vs (.state v))

                      v)))]
      (f [] s))))

(extend-type grmr/repeat-rule
  Parser
  (collapse-branches [r]
    (let [[rule rule-map] (.rule r)]
      [(.rule r rule) rule-map]))

  (parse [r s]
    (let [f (fn repeat-parse [vs s]
              (let [v (parse (.rule r) s)]
                (cond (and (instance? ParserFail v)
                           (< 0 (count vs)))
                      (ParserMatch vs s)

                      (instance? ParserMatch v)
                      (repeat-parse (conj vs (.value v)) (.state v))

                      (instance? ParserIgnore v)
                      (repeat-parse vs (.state v))

                      v)))]
      (f [] s))))

(extend-type grmr/parser-rule
  Parser
  (collapse-branches [r]
    (let [[rule rule-map] (.rule r)
          name (cond (instance? grmr/recursion-rule (.name r))
                     (.rule-name (.name r))
                     (.name r))]
      [rule (assoc rule-map name rule)]))

  (parse [r s]
    (ParserError (str "Un-collapsed rule " (.name r))
                 s)))

(extend-type grmr/recursion-rule
  Parser
  (parse [r s]
    (either (map (get-in s [.rule-map (.rule-name r)])
                 (fn [rr]
                   (parse rr s)))
            (ParserError (str "Un-defined recursive rule " (.rule-name r))
                         s))))

(extend-type grmr/All-rule
  Parser
  (collapse-branches [r]
    (let [[rules rule-map] (reduce (.rules r) [[] {}]
                                   (fn [[r m] [inner-r inner-m]]
                                     (cond (instance? grmr/All-rule inner-r)
                                           [(comp r (.rules inner-r))
                                            (comp m inner-m)]

                                           [(conj r inner-r)
                                            (comp m inner-m)])))]
      [(either (and (= 1 (count rules))
                    (first rules))
               (grmr/All-rule rules))
       rule-map]))

  (parse [r state]
    (cond (empty? (.rules r))
          (ParserError (str "Invalid parser " _FILE_ " " _LINE_) state)

          (reduce (.rules r) (ParserMatch [] state)
                  (fn [results inner-r]
                    (cond (or (instance? ParserIgnore results)
                              (instance? ParserMatch results))
                          (let [inn-res (parse inner-r (.state results))]
                            (cond (instance? ParserMatch inn-res)
                                  (.value inn-res (conj (.value results) (.value inn-res)))

                                  (instance? ParserIgnore inn-res)
                                  (.state results (.state inn-res))

                                  inn-res))

                          results))))))

(extend-type grmr/Any-rule
  Parser
  (collapse-branches [r]
    (let [[rules rule-map] (reduce (.rules r) [[] {}]
                                   (fn [[r m] [inner-r inner-m]]
                                     (cond (instance? grmr/Any-rule inner-r)
                                           [(comp r (.rules inner-r))
                                            (comp m inner-m)]

                                           [(conj r inner-r)
                                            (comp m inner-m)])))]
      [(grmr/Any-rule rules) rule-map]))

  (parse [r state]
    (cond (empty? (.rules r))
          (ParserError (str "Invalid parser " _FILE_ " " _LINE_) state)

          (reduce (.rules r) parser-fail
                  (fn [result inner-r]
                    (either (or (instance? ParserError result)
                                (instance? ParserMatch result)
                                (instance? ParserIgnore result))

                            (parse inner-r state)))))))

(extend-type grmr/ignore-rule
  Parser
  (collapse-branches [r]
    (let [[rule rule-map] (.rule r)]
      [(grmr/ignore rule) rule-map]))

  (parse [r state]
    (let [result (parse (.rule r) state)]
      (cond (instance? ParserMatch result)
            (ParserIgnore (.state result))

            result))))

(defprotocol WrapInput
  (wrap-input [x]
    x))

(extend-type String
  WrapInput
  (wrap-input [x] (list x)))

(defn parser [grammar]
  ;; TODO: might could use hylo here
  (let [grammar (ana terminate-string grammar)
        ;; _ (print-err 'grmr grammar)
        ;; [raw] ((cata make-parser grammar se/state-error) {})
        ;; _ (print-err 'raw _LINE_ raw)
        [grammar-parser rules-map] (cata collapse-branches grammar)
        ;; _ (print-err 'collapsed _LINE_ grammar-parser)
        ;; _ (print-err 'rules-map _LINE_ rules-map)
        ]
    (fn
      ([input]
       (parse grammar-parser (ParserState "" (wrap-input input) rules-map {})))
      ([values input]
       (parse grammar-parser (ParserState "" (wrap-input input) rules-map values))))))

;; TODO: may no longer be correct after switching to state-error
;; (defn parse-stream
;;   ([s grammar] (parse-stream s grammar {}))
;;   ([s grammar values]
;;    (let [grammar (grmr/string-terminal grammar)
;;          [grammar-parser recursive-rules] ((fr/evaluate grammar recursive-descent) {})]
;;      (st/state-stream (ParserState "" s recursive-rules values)
;;                       (fn [stream-state]
;;                         (either (grammar-parser stream-state)
;;                                 ["" (ParserState "" st/empty-stream recursive-rules values)]))))))
