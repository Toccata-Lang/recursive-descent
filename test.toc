
;; Components to build the grammar out of
(add-ns grmr (git-dependency "https://github.com/Toccata-Lang/grammar.git"
                             "grammar.toc"
                             :sha "7cddf1e"))
(add-ns rd (module "recursive-descent.toc"))

(defn test [result matched remaining file line]
  (either (for [curr (get-in result [.state .curr-input])
                inp (get-in result [.state .input])
                _ (= remaining (str curr (to-str inp)))
                _ (= (.value result) matched)]
            '_)
          (do
            (print-err 'Failed-at file line
                       "\n" 'result result
                       "\n\nvalue" (get result .value)
                       "\n\nmatched" matched
                       "\n\nmatched comp" (flat-map (get result .value)
                                                    (partial = matched))
                       "\n\ncurr-input" (apply-to str
                                                  (get-in result [.state .curr-input])
                                                  (map (get-in result [.state .input]) to-str))
                       "\n\nneeded remaining" remaining
                       "\n\nremaining comp" (flat-map (get-in result [.state .curr-input])
                                                      (partial = remaining))
                       )
            (abort))))

(main [_]
  (test ((rd/parser "a") "ab")
        "a" "b"
        _FILE_ _LINE_)

  (test ((rd/parser (grmr/all "a" "b")) "ab")
        ["a" "b"] ""
        _FILE_ _LINE_)

  (test ((rd/parser (grmr/any "a" "b")) "ab")
        "a" "b"
        _FILE_ _LINE_)

  (test ((rd/parser (grmr/any "a" "b")) "ba")
        "b" "a"
        _FILE_ _LINE_)

  (test ((rd/parser (grmr/all (grmr/any "y" "b")
                              (grmr/any "a" "x")))
         "ba")
        ["b" "a"] ""
        _FILE_ _LINE_)
  
  (test ((rd/parser (grmr/any (grmr/all "a" "b")
                              (grmr/all "b" "a")))
         "ba")
        ["b" "a"] ""
        _FILE_ _LINE_)

  (test ((rd/parser "ba") "ba")
        "ba" ""
        _FILE_ _LINE_)

  (test ((rd/parser (apply-to (fn this-fn [x v]
                                 (conj v x))
                               (grmr/term "b")
                               (grmr/parser-always [])))
         "ba")
        ["b"] "a"
        _FILE_ _LINE_)

  (test ((rd/parser (grmr/one-or-more "a")) "aa")
        (list "a" "a") ""
        _FILE_ _LINE_)

  (test ((rd/parser (grmr/one-or-more "a")) "aax")
        (list "a" "a") "x"
        _FILE_ _LINE_)

  (test ((rd/parser (grmr/none-or-more "a")) "aa")
        (list "a" "a") ""
        _FILE_ _LINE_)

  (test ((rd/parser (grmr/none-or-more "x")) "aax")
        empty-list "aax"
        _FILE_ _LINE_)
  
  (test ((rd/parser (grmr/none-or-more grmr/alpha)) "abcd1x")
        (list "a" "b" "c" "d") "1x"
        _FILE_ _LINE_)

  (test ((rd/parser (apply-to (fn test-alpha [start]
                                (symbol (str start)))
                              grmr/alpha
                              (grmr/ignore "/")))
         "a/bcd")
        'a "bcd"
        _FILE_ _LINE_)

  (test ((rd/parser (grmr/parser-rule "looper"
                                      (grmr/any (grmr/all "z" (grmr/recurse "looper"))
                                                (grmr/always []))))
         "zzzbcd")
        ["z" ["z" ["z" []]]] "bcd"
        _FILE_ _LINE_)

  (print-err 'done))

;; (defn scan-line [s]
;;   ;; all chars except \n
;;   (assert (instance? String s))
;;   (inline C Integer "
;;     char *str = NULL;
;;     int64_t strLen;
;;     if (s_0->type == StringBufferType) {
;;       str = ((String *)s_0)->buffer;
;;       strLen = ((String *)s_0)->len;
;;     } else if (s_0->type == SubStringType) {
;;       str = ((SubString *)s_0)->buffer;
;;       strLen = ((SubString *)s_0)->len;
;;     }
;;     int64_t len;
;;     for (len = 0; len < strLen && str[len] != 10;)
;;        len++;
;;     dec_and_free(s_0, 1);
;;     return(integerValue(len));
;; "))

;; (def line
;;   (grmr/rule "read-line"
;;              (grmr/apply-fn identity
;;                             (grmr/optional (grmr/term-fn scan-line))
;;                             (grmr/ignore "\n"))))

;; (def post (grmr/none-or-more line))

;; (def generate-post
;;   (rd/parser post))

;; (def input-text
;; "---
;; layout: post
;; tags: [core]
;; comments: true
;; ---

;; ### We're rolling now
;; ")

;; (main [_]
;;       (map (generate-post input-text)
;;            (fn [lines]
;;              (or (= 7 (count lines))
;;                  (do
;;                    (print-err 'fail!!! (count lines))
;;                    (abort))))))
